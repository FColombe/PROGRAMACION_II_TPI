// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CostaFascinosa.Data;

public partial class COSTA_FASCINOSAContext : DbContext
{
    public COSTA_FASCINOSAContext(DbContextOptions<COSTA_FASCINOSAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actividade> Actividades { get; set; }

    public virtual DbSet<Amenity> Amenities { get; set; }

    public virtual DbSet<Categoria> Categorias { get; set; }

    public virtual DbSet<CodVestimenta> CodVestimentas { get; set; }

    public virtual DbSet<ConsumosGastronomico> ConsumosGastronomicos { get; set; }

    public virtual DbSet<ConsumosHabitacione> ConsumosHabitaciones { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<Coordinadore> Coordinadores { get; set; }

    public virtual DbSet<Destinatario> Destinatarios { get; set; }

    public virtual DbSet<Estado> Estados { get; set; }

    public virtual DbSet<Habitacione> Habitaciones { get; set; }

    public virtual DbSet<Nacionalidade> Nacionalidades { get; set; }

    public virtual DbSet<Pasajero> Pasajeros { get; set; }

    public virtual DbSet<PreferenciasAlimenticia> PreferenciasAlimenticias { get; set; }

    public virtual DbSet<ProductosGastronomico> ProductosGastronomicos { get; set; }

    public virtual DbSet<ResenasActividade> ResenasActividades { get; set; }

    public virtual DbSet<ResenasAmenity> ResenasAmenities { get; set; }

    public virtual DbSet<ResenasServicio> ResenasServicios { get; set; }

    public virtual DbSet<ReservasActividade> ReservasActividades { get; set; }

    public virtual DbSet<ReservasServicio> ReservasServicio { get; set; }

    public virtual DbSet<ServiciosGastronomico> ServiciosGastronomicos { get; set; }

    public virtual DbSet<Tematica> Tematicas { get; set; }

    public virtual DbSet<TipoContacto> TipoContactos { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    public virtual DbSet<TiposHabitacione> TiposHabitaciones { get; set; }

    public virtual DbSet<TiposProducto> TiposProductos { get; set; }

    public virtual DbSet<TiposServicio> TiposServicios { get; set; }

    public virtual DbSet<Turno> Turnos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<Zona> Zonas { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actividade>(entity =>
        {
            entity.HasKey(e => e.IdActividad).HasName("PK_ACTIVIDAD");

            entity.ToTable("ACTIVIDADES");

            entity.Property(e => e.IdActividad).HasColumnName("id_actividad");
            entity.Property(e => e.Costo)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("costo");
            entity.Property(e => e.CupoMax).HasColumnName("cupo_max");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Duracion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("duracion");
            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.IdCodVestimenta).HasColumnName("id_cod_vestimenta");
            entity.Property(e => e.IdCoordinador).HasColumnName("id_coordinador");
            entity.Property(e => e.IdDestinatario).HasColumnName("id_destinatario");
            entity.Property(e => e.IdTurno).HasColumnName("id_turno");
            entity.Property(e => e.IdZona).HasColumnName("id_zona");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.RequiereReserva)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("requiere_reserva");

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdCategoria)
                .HasConstraintName("FK_ACTIVIDADES_CATEGORIAS");

            entity.HasOne(d => d.IdCodVestimentaNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdCodVestimenta)
                .HasConstraintName("FK_ACTIVIDADES_COD_VESTIMENTAS");

            entity.HasOne(d => d.IdCoordinadorNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdCoordinador)
                .HasConstraintName("FK_ACTIVIDADES_COORDINADORES");

            entity.HasOne(d => d.IdDestinatarioNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdDestinatario)
                .HasConstraintName("FK_ACTIVIDADES_DESTINATARIOS");

            entity.HasOne(d => d.IdTurnoNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdTurno)
                .HasConstraintName("FK_ACTIVIDADES_TURNOS");

            entity.HasOne(d => d.IdZonaNavigation).WithMany(p => p.Actividades)
                .HasForeignKey(d => d.IdZona)
                .HasConstraintName("FK_ACTIVIDADES_ZONAS");
        });

        modelBuilder.Entity<Amenity>(entity =>
        {
            entity.HasKey(e => e.IdAmenitie);

            entity.ToTable("AMENITIES");

            entity.Property(e => e.IdAmenitie).HasColumnName("id_amenitie");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.IdCodVestimenta).HasColumnName("id_cod_vestimenta");
            entity.Property(e => e.IdDestinatario).HasColumnName("id_destinatario");
            entity.Property(e => e.IdTurno).HasColumnName("id_turno");
            entity.Property(e => e.IdZona).HasColumnName("id_zona");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.IdCategoria)
                .HasConstraintName("FK_AMENITIES_CATEGORIAS");

            entity.HasOne(d => d.IdCodVestimentaNavigation).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.IdCodVestimenta)
                .HasConstraintName("FK_AMENITIES_COD_VESTIMENTAS");

            entity.HasOne(d => d.IdDestinatarioNavigation).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.IdDestinatario)
                .HasConstraintName("FK_AMENITIES_DESTINATARIOS");

            entity.HasOne(d => d.IdTurnoNavigation).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.IdTurno)
                .HasConstraintName("FK_AMENITIES_TURNOS");

            entity.HasOne(d => d.IdZonaNavigation).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.IdZona)
                .HasConstraintName("FK_AMENITIES_ZONAS");
        });

        modelBuilder.Entity<Categoria>(entity =>
        {
            entity.HasKey(e => e.IdCategoria).HasName("PK_CATEGORIA");

            entity.ToTable("CATEGORIAS");

            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CodVestimenta>(entity =>
        {
            entity.HasKey(e => e.IdCodVestimenta);

            entity.ToTable("COD_VESTIMENTAS");

            entity.Property(e => e.IdCodVestimenta).HasColumnName("id_cod_vestimenta");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<ConsumosGastronomico>(entity =>
        {
            entity.HasKey(e => e.IdConsumoGastronomico);

            entity.ToTable("CONSUMOS_GASTRONOMICOS");

            entity.Property(e => e.IdConsumoGastronomico).HasColumnName("id_consumo_gastronomico");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.IdConsumo).HasColumnName("id_consumo");
            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdConsumoNavigation).WithMany(p => p.ConsumosGastronomicos)
                .HasForeignKey(d => d.IdConsumo)
                .HasConstraintName("FK_CONSUMOS_GASTRONOMICOS_CONSUMOS_HABITACIONES");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.ConsumosGastronomicos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_CONSUMOS_GASTRONOMICOS_PRODUCTOS_GASTRONOMICOS");
        });

        modelBuilder.Entity<ConsumosHabitacione>(entity =>
        {
            entity.HasKey(e => e.IdConsumo).HasName("PK_CONSUMOS_HAB");

            entity.ToTable("CONSUMOS_HABITACIONES");

            entity.Property(e => e.IdConsumo).HasColumnName("id_consumo");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NroHabitacion).HasColumnName("nro_habitacion");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.ConsumosHabitaciones)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CONS_USUARIO");

            entity.HasMany(ch => ch.ReservasActividades) // Relación de colección de "ReservaActividade"
    .WithOne(ra => ra.IdConsumoNavigation)  // Navegación inversa desde "ReservaActividade"
    .HasForeignKey(ra => ra.IdConsumo)      // Clave foránea en "ReservaActividade"
    .OnDelete(DeleteBehavior.Cascade)       // Borrado en cascada
    .HasConstraintName("FK_RESERVAS_ACT_CONS");
            entity.HasMany(ch => ch.ConsumosGastronomicos) // Relación de colección de "ReservaActividade"
    .WithOne(ra => ra.IdConsumoNavigation)  // Navegación inversa desde "ReservaActividade"
    .HasForeignKey(ra => ra.IdConsumo)      // Clave foránea en "ReservaActividade"
    .OnDelete(DeleteBehavior.Cascade)       // Borrado en cascada
    .HasConstraintName("FK_CONSUMOS_GASTRONOMICOS_CONSUMOS_HABITACIONES");

            entity.HasOne(d => d.NroHabitacionNavigation).WithMany(p => p.ConsumosHabitaciones)
                .HasForeignKey(d => d.NroHabitacion)
                .HasConstraintName("FK_CONS_HAB");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto);

            entity.ToTable("CONTACTOS");

            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("contacto");
            entity.Property(e => e.IdPasajero).HasColumnName("id_pasajero");
            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");

            entity.HasOne(d => d.IdPasajeroNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdPasajero)
                .HasConstraintName("FK_CONTACTOS_PASAJEROS");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .HasConstraintName("FK_CONTACTOS_TIPO_CONTACTOS");
        });

        modelBuilder.Entity<Coordinadore>(entity =>
        {
            entity.HasKey(e => e.IdCoordinador);

            entity.ToTable("COORDINADORES");

            entity.Property(e => e.IdCoordinador).HasColumnName("id_coordinador");
            entity.Property(e => e.Apellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.FechaNac)
                .HasColumnType("datetime")
                .HasColumnName("fecha_nac");
            entity.Property(e => e.Nacionalidad).HasColumnName("nacionalidad");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.NacionalidadNavigation).WithMany(p => p.Coordinadores)
                .HasForeignKey(d => d.Nacionalidad)
                .HasConstraintName("FK_COORDINADORES_NACIONALIDADES");
        });

        modelBuilder.Entity<Destinatario>(entity =>
        {
            entity.HasKey(e => e.IdDestinatario);

            entity.ToTable("DESTINATARIOS");

            entity.Property(e => e.IdDestinatario).HasColumnName("id_destinatario");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Estado>(entity =>
        {
            entity.HasKey(e => e.IdEstado);

            entity.ToTable("ESTADOS");

            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Habitacione>(entity =>
        {
            entity.HasKey(e => e.NroHabitacion);

            entity.ToTable("HABITACIONES");

            entity.Property(e => e.NroHabitacion).HasColumnName("nro_habitacion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdTipoHabitacion).HasColumnName("id_tipo_habitacion");
            entity.Property(e => e.IdZona).HasColumnName("id_zona");

            entity.HasOne(d => d.IdTipoHabitacionNavigation).WithMany(p => p.Habitaciones)
                .HasForeignKey(d => d.IdTipoHabitacion)
                .HasConstraintName("FK_HABITACIONES_TIPO_HABITACIONES");

            entity.HasOne(d => d.IdZonaNavigation).WithMany(p => p.Habitaciones)
                .HasForeignKey(d => d.IdZona)
                .HasConstraintName("FK_HABITACIONES_ZONAS");
        });

        modelBuilder.Entity<Nacionalidade>(entity =>
        {
            entity.HasKey(e => e.IdNacionalidad);

            entity.ToTable("NACIONALIDADES");

            entity.Property(e => e.IdNacionalidad).HasColumnName("id_nacionalidad");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Pasajero>(entity =>
        {
            entity.HasKey(e => e.IdPasajero);

            entity.ToTable("PASAJEROS");

            entity.Property(e => e.IdPasajero).HasColumnName("id_pasajero");
            entity.Property(e => e.Apellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.FechaAbordo)
                .HasColumnType("datetime")
                .HasColumnName("fecha_abordo");
            entity.Property(e => e.FechaDesbordo)
                .HasColumnType("datetime")
                .HasColumnName("fecha_desbordo");
            entity.Property(e => e.FechaNac)
                .HasColumnType("datetime")
                .HasColumnName("fecha_nac");
            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.IdTipoDocumento).HasColumnName("id_tipo_documento");
            entity.Property(e => e.Nacionalidad).HasColumnName("nacionalidad");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NroDocumento).HasColumnName("nro_documento");
            entity.Property(e => e.NroHabitacion).HasColumnName("nro_habitacion");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sexo");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.Pasajeros)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("FK_PASAJEROS_ESTADOS");

            entity.HasOne(d => d.IdTipoDocumentoNavigation).WithMany(p => p.Pasajeros)
                .HasForeignKey(d => d.IdTipoDocumento)
                .HasConstraintName("FK_PASAJEROS_TIPO_DOCUMENTO");

            entity.HasOne(d => d.NacionalidadNavigation).WithMany(p => p.Pasajeros)
                .HasForeignKey(d => d.Nacionalidad)
                .HasConstraintName("FK_PASAJEROS_NACIONALIDAD");

            entity.HasOne(d => d.NroHabitacionNavigation).WithMany(p => p.Pasajeros)
                .HasForeignKey(d => d.NroHabitacion)
                .HasConstraintName("FK_PASAJEROS_HABITACIONES");
        });

        modelBuilder.Entity<PreferenciasAlimenticia>(entity =>
        {
            entity.HasKey(e => e.IdPreferencia);

            entity.ToTable("PREFERENCIAS_ALIMENTICIAS");

            entity.Property(e => e.IdPreferencia).HasColumnName("id_preferencia");
            entity.Property(e => e.Preferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("preferencia");
        });

        modelBuilder.Entity<ProductosGastronomico>(entity =>
        {
            entity.HasKey(e => e.IdProducto);

            entity.ToTable("PRODUCTOS_GASTRONOMICOS");

            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
            entity.Property(e => e.IdTipoProducto).HasColumnName("id_tipo_producto");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.ProductosGastronomicos)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("FK_PRODUCTOS_GASTRONOMICOS_SERVICIOS_GASTRONOMICOS");

            entity.HasOne(d => d.IdTipoProductoNavigation).WithMany(p => p.ProductosGastronomicos)
                .HasForeignKey(d => d.IdTipoProducto)
                .HasConstraintName("FK_PRODUCTOS_GASTRONOMICOS_TIPOS_PRODUCTOS");
        });

        modelBuilder.Entity<ResenasActividade>(entity =>
        {
            entity.HasKey(e => e.IdResenaAct);

            entity.ToTable("RESENAS_ACTIVIDADES");

            entity.Property(e => e.IdResenaAct).HasColumnName("id_resena_act");
            entity.Property(e => e.Comentario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("comentario");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdActividad).HasColumnName("id_actividad");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Puntuacion).HasColumnName("puntuacion");

            entity.HasOne(d => d.IdActividadNavigation).WithMany(p => p.ResenasActividades)
                .HasForeignKey(d => d.IdActividad)
                .HasConstraintName("FK_RESENAS_ACTIVIDADES_ACTIVIDADES");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.ResenasActividades)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_RESENAS_ACTIVIDADES_USUARIOS");
        });

        modelBuilder.Entity<ResenasAmenity>(entity =>
        {
            entity.HasKey(e => e.IdResenaAmenitie).HasName("PK_RESENAS_AMENITIE");

            entity.ToTable("RESENAS_AMENITIES");

            entity.Property(e => e.IdResenaAmenitie).HasColumnName("id_resena_amenitie");
            entity.Property(e => e.Comentario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("comentario");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdAmenitie).HasColumnName("id_amenitie");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Puntuacion).HasColumnName("puntuacion");

            entity.HasOne(d => d.IdAmenitieNavigation).WithMany(p => p.ResenasAmenities)
                .HasForeignKey(d => d.IdAmenitie)
                .HasConstraintName("FK_RESENAS_AMENITIES_AMENITIES");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.ResenasAmenities)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_RESENAS_AMENITIES_USUARIOS");
        });

        modelBuilder.Entity<ResenasServicio>(entity =>
        {
            entity.HasKey(e => e.IdResenaServ);

            entity.ToTable("RESENAS_SERVICIOS");

            entity.Property(e => e.IdResenaServ).HasColumnName("id_resena_serv");
            entity.Property(e => e.Comentario)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("comentario");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Puntuacion).HasColumnName("puntuacion");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.ResenasServicios)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("FK_RESENA_SERVICIOS_SERVICIOS_GASTRONOMICOS");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.ResenasServicios)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_RESENA_SERVICIOS_USUARIOS");
        });

        modelBuilder.Entity<ReservasActividade>(entity =>
        {
            entity.HasKey(e => e.IdReservaAct);

            entity.ToTable("RESERVAS_ACTIVIDADES");

            entity.Property(e => e.IdReservaAct).HasColumnName("id_reserva_act");
            entity.Property(e => e.CantidadReservada).HasColumnName("cantidad_reservada");
            entity.Property(e => e.CostoUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("costo_unitario");
            entity.Property(e => e.FechaReservada)
                .HasColumnType("datetime")
                .HasColumnName("fecha_reservada");
            entity.Property(e => e.IdActividad).HasColumnName("id_actividad");
            entity.Property(e => e.IdConsumo).HasColumnName("id_consumo");

            entity.HasOne(d => d.IdActividadNavigation).WithMany(p => p.ReservasActividades)
                .HasForeignKey(d => d.IdActividad)
                .HasConstraintName("FK_RESERVAS_ACT_ACT");

            entity.HasOne(d => d.IdConsumoNavigation)
    .WithMany(p => p.ReservasActividades)
    .HasForeignKey(d => d.IdConsumo)
    //.OnDelete(DeleteBehavior.Cascade)
    .HasConstraintName("FK_RESERVAS_ACT_CONS");

        });

        modelBuilder.Entity<ReservasServicio>(entity =>
        {
            entity.HasKey(e => e.IdReservaServ);

            entity.ToTable("RESERVAS_SERVICIOS");

            entity.Property(e => e.IdReservaServ).HasColumnName("id_reserva_serv");
            entity.Property(e => e.CantidadReservada).HasColumnName("cantidad_reservada");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.ReservasServicios)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("FK_RESERVAS_SERVICIOS_SERVICIOS_GASTRONOMICOS");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.ReservasServicios)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_RESERVAS_SERVICIOS_USUARIOS");
        });

        modelBuilder.Entity<ServiciosGastronomico>(entity =>
        {
            entity.HasKey(e => e.IdServicio);

            entity.ToTable("SERVICIOS_GASTRONOMICOS");

            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
            entity.Property(e => e.AptoCeliaquia)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("apto_celiaquia");
            entity.Property(e => e.CupoMax).HasColumnName("cupo_max");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdCodVestimenta).HasColumnName("id_cod_vestimenta");
            entity.Property(e => e.IdDestinatario).HasColumnName("id_destinatario");
            entity.Property(e => e.IdPreferencia).HasColumnName("id_preferencia");
            entity.Property(e => e.IdTematica).HasColumnName("id_tematica");
            entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            entity.Property(e => e.IdTurnoApertura).HasColumnName("id_turno_apertura");
            entity.Property(e => e.IdZona).HasColumnName("id_zona");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.RequiereReserva)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("requiere_reserva");

            entity.HasOne(d => d.IdCodVestimentaNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdCodVestimenta)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_COD_VESTIMENTA");

            entity.HasOne(d => d.IdDestinatarioNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdDestinatario)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_DESTINATARIOS");

            entity.HasOne(d => d.IdPreferenciaNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdPreferencia)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_PREFERENCIAS_ALIMENTICIAS");

            entity.HasOne(d => d.IdTematicaNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdTematica)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_TEMATICAS");

            entity.HasOne(d => d.IdTipoServicioNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdTipoServicio)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_TIPOS_SERVICIOS");

            entity.HasOne(d => d.IdTurnoAperturaNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdTurnoApertura)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_TURNOS");

            entity.HasOne(d => d.IdZonaNavigation).WithMany(p => p.ServiciosGastronomicos)
                .HasForeignKey(d => d.IdZona)
                .HasConstraintName("FK_SERVICIOS_GASTRONOMICOS_ZONAS");
        });

        modelBuilder.Entity<Tematica>(entity =>
        {
            entity.HasKey(e => e.IdTematica).HasName("PK_TIPOS_RESTAURANTES");

            entity.ToTable("TEMATICAS");

            entity.Property(e => e.IdTematica).HasColumnName("id_tematica");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TipoContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto).HasName("PK_TIPOS_CONTACTOS");

            entity.ToTable("TIPO_CONTACTOS");

            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc);

            entity.ToTable("TIPOS_DOCUMENTOS");

            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TiposHabitacione>(entity =>
        {
            entity.HasKey(e => e.IdTipoHabitacion);

            entity.ToTable("TIPOS_HABITACIONES");

            entity.Property(e => e.IdTipoHabitacion).HasColumnName("id_tipo_habitacion");
            entity.Property(e => e.Tipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TiposProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoProducto);

            entity.ToTable("TIPOS_PRODUCTOS");

            entity.Property(e => e.IdTipoProducto).HasColumnName("id_tipo_producto");
            entity.Property(e => e.Tipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TiposServicio>(entity =>
        {
            entity.HasKey(e => e.IdTipoServicio);

            entity.ToTable("TIPOS_SERVICIOS");

            entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipo_servicio");
        });

        modelBuilder.Entity<Turno>(entity =>
        {
            entity.HasKey(e => e.IdTurno);

            entity.ToTable("TURNOS");

            entity.Property(e => e.IdTurno).HasColumnName("id_turno");
            entity.Property(e => e.FranjaHoraria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("franja_horaria");
            entity.Property(e => e.Turno1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("turno");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("USUARIOS");

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Contraseña).HasColumnName("contraseña");
            entity.Property(e => e.IdPasajero).HasColumnName("id_pasajero");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPasajeroNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdPasajero)
                .HasConstraintName("FK_USUARIOS_PASAJEROS");
        });

        modelBuilder.Entity<Zona>(entity =>
        {
            entity.HasKey(e => e.IdZona);

            entity.ToTable("ZONAS");

            entity.Property(e => e.IdZona).HasColumnName("id_zona");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Piso).HasColumnName("piso");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}